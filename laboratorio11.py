# -*- coding: utf-8 -*-
"""Laboratorio11.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1sN0lZanvXOQaC2ugbbNgfWbd6RTWthjJ
"""

import matplotlib.pyplot as plt
import numpy as np
import scipy.stats as stats

# Datos
asignaturas = ['Matemáticas', 'Ciencias', 'Historia', 'Inglés', 'Arte']
calificaciones = [85, 90, 78, 88, 92]

# Cálculo del promedio general
promedio_general = sum(calificaciones) / len(calificaciones)

# Crear gráfico de barras con más espacio entre ellas
plt.bar(asignaturas, calificaciones, color='skyblue', width=0.6)

# Línea del promedio general
plt.axhline(promedio_general, color='red', linestyle='--', label=f'Promedio General: {promedio_general:.1f}')

# Configurar etiquetas y título
plt.xlabel('Asignaturas')
plt.ylabel('Calificaciones')
plt.title('Comparación de Calificaciones por Asignatura')

# Ajustar los límites del eje Y para más amplitud debajo de las barras
plt.ylim(40, 100)  # Amplía el rango del eje Y

# Mover la leyenda dentro del gráfico sin superposición
plt.legend(loc='upper right', frameon=True)

# Ajustar diseño para que no se recorten elementos
plt.tight_layout()

# Mostrar el gráfico
plt.show()

# Datos
sitios = ['Sitio A', 'Sitio B', 'Sitio C', 'Sitio D', 'Sitio E']
tiempos = [1.2, 2.5, 0.9, 3.0, 1.8]

# Calcular el promedio general
promedio_general = sum(tiempos) / len(tiempos)

# Crear el gráfico de barras
plt.bar(sitios, tiempos, color='lightgreen', width=0.6)

# Línea horizontal para el promedio general
plt.axhline(promedio_general, color='red', linestyle='--', label=f'Promedio General: {promedio_general:.2f} seg')

# Etiquetas y título
plt.xlabel('Sitios Web')
plt.ylabel('Tiempo de Carga (segundos)')
plt.title('Comparación del Tiempo de Carga de Sitios Web')

# Ajustar los límites del eje Y
plt.ylim(0, max(tiempos) + 0.5)  # Espacio adicional sobre el valor máximo

# Leyenda dentro del gráfico
plt.legend(loc='upper right', frameon=True)

# Ajustar diseño
plt.tight_layout()

# Mostrar el gráfico
plt.show()

import matplotlib.pyplot as plt


# Datos de ejemplo
horas_estudio = [2, 4, 6, 8, 10]  # Horas de estudio
rendimiento_academico = [60, 70, 75, 85, 90]  # Calificaciones

# Cálculo del coeficiente de correlación de Pearson
correlacion, _ = stats.pearsonr(horas_estudio, rendimiento_academico)

# Crear el gráfico de dispersión
plt.scatter(horas_estudio, rendimiento_academico, color='blue', label=f'Correlación = {correlacion:.2f}')

# Ajustar el gráfico
plt.plot(horas_estudio, np.poly1d(np.polyfit(horas_estudio, rendimiento_academico, 1))(horas_estudio), color='red', linestyle='--')
plt.xlabel('Horas de Estudio')
plt.ylabel('Rendimiento Académico (Calificación)')
plt.title('Relación entre Horas de Estudio y Rendimiento Académico')
plt.legend()

# Mostrar el gráfico
plt.show()

# Imprimir la correlación
print(f'Coeficiente de Correlación de Pearson: {correlacion:.2f}')

# Datos proporcionados
horas_estudio = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]  # Horas de estudio
rendimiento = [50, 60, 65, 70, 75, 78, 80, 82, 85, 87]  # Rendimiento académico

# Cálculo del coeficiente de correlación de Pearson
correlacion, _ = stats.pearsonr(horas_estudio, rendimiento)

# Crear el gráfico de dispersión
plt.scatter(horas_estudio, rendimiento, color='blue', label=f'Correlación = {correlacion:.2f}')

# Ajustar el gráfico (línea de regresión)
plt.plot(horas_estudio, np.poly1d(np.polyfit(horas_estudio, rendimiento, 1))(horas_estudio), color='red', linestyle='--')

# Configuración de etiquetas y título
plt.xlabel('Horas de Estudio')
plt.ylabel('Rendimiento Académico')
plt.title('Relación entre Horas de Estudio y Rendimiento Académico')

# Mostrar leyenda y gráfico
plt.legend()
plt.tight_layout()
plt.show()

# Imprimir el valor de la correlación
print(f'Coeficiente de Correlación de Pearson: {correlacion:.2f}')

# Datos de salarios por departamento, ahora con valores atípicos añadidos
salarios_departamento_A = [3500, 4000, 4500, 5000, 5500, 6000, 6500, 9000]  # valor atípico en 9000
salarios_departamento_B = [2800, 3000, 3200, 3500, 3800, 4000, 4200, 10000]  # valor atípico en 10000
salarios_departamento_C = [4200, 4500, 4800, 5100, 5500, 6000, 6500, 12000]  # valor atípico en 12000

# Crear el gráfico de caja (boxplot) con colores personalizados y valores atípicos
plt.boxplot([salarios_departamento_A, salarios_departamento_B, salarios_departamento_C],
            labels=['Departamento A', 'Departamento B', 'Departamento C'],
            patch_artist=True,  # Esto habilita el color en las cajas
            boxprops=dict(facecolor='skyblue', color='blue'),  # Color de la caja
            flierprops=dict(markerfacecolor='red', marker='o'),  # Color de los valores atípicos
            medianprops=dict(color='purple'))  # Color de la mediana

# Configurar etiquetas y título
plt.ylabel('Salarios')
plt.title('Distribución de Salarios en Tres Departamentos con Valores Atípicos')

# Mostrar gráfico
plt.show()